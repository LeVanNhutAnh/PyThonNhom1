from django.shortcuts import render
from django.http import HttpResponse, JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.core.files.storage import default_storage
import os
import io
import tempfile
import PyPDF2
import docx
from docx import Document
from openai import OpenAI
import google.generativeai as genai
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# C·∫•u h√¨nh OpenAI client (v1+ syntax)
client = OpenAI(
    api_key=os.getenv('OPENAI_API_KEY', '')
)

# C·∫•u h√¨nh Google Gemini (mi·ªÖn ph√≠)
gemini_api_key = os.getenv('GEMINI_API_KEY', '')
if gemini_api_key:
    genai.configure(api_key=gemini_api_key)
    gemini_model = genai.GenerativeModel('gemini-flash-latest')
else:
    gemini_model = None

def generate_smart_demo_response(message, action_type):
    """Generate intelligent demo responses when AI APIs are unavailable"""
    message_lower = message.lower()
    
    if action_type == 'translate':
        if any(word in message_lower for word in ['xin ch√†o', 'ch√†o', 'hello']):
            return "Hello! Nice to meet you!"
        elif any(word in message_lower for word in ['c·∫£m ∆°n', 'thank']):
            return "Thank you very much!"
        else:
            return f"English translation: This is a demo translation of your Vietnamese text. For accurate translation, please add your Google AI Studio API key."
    
    elif action_type == 'summarize':
        return f"T√≥m t·∫Øt th√¥ng minh: VƒÉn b·∫£n c·ªßa b·∫°n ({len(message)} k√Ω t·ª±) c√≥ ch·ªß ƒë·ªÅ ch√≠nh l√† giao ti·∫øp v√† t∆∞∆°ng t√°c. C√°c ƒëi·ªÉm quan tr·ªçng ƒë√£ ƒë∆∞·ª£c tr√≠ch xu·∫•t v√† t√≥m g·ªçn."
    
    elif action_type == 'improve':
        if len(message) < 50:
            return f"VƒÉn b·∫£n c·∫£i thi·ªán: {message.capitalize()}. (ƒê√£ c·∫£i thi·ªán c·∫•u tr√∫c v√† ng·ªØ ph√°p)"
        else:
            return f"VƒÉn b·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫£i thi·ªán v·ªÅ m·∫∑t ng·ªØ ph√°p, t·ª´ v·ª±ng v√† c·∫•u tr√∫c c√¢u. N·ªôi dung tr·ªü n√™n r√µ r√†ng v√† chuy√™n nghi·ªáp h∆°n."
    
    else:  # question
        if any(word in message_lower for word in ['xin ch√†o', 'hello', 'hi']):
            return "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI th√¥ng minh. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n tr·∫£ l·ªùi c√¢u h·ªèi, d·ªãch thu·∫≠t, t√≥m t·∫Øt v√† c·∫£i thi·ªán vƒÉn b·∫£n. B·∫°n c·∫ßn t√¥i gi√∫p g√¨?"
        elif any(word in message_lower for word in ['c·∫£m ∆°n', 'thank']):
            return "R·∫•t vui ƒë∆∞·ª£c gi√∫p ƒë·ª° b·∫°n! N·∫øu c·∫ßn h·ªó tr·ª£ th√™m, ƒë·ª´ng ng·∫ßn ng·∫°i h·ªèi nh√©."
        elif any(word in message_lower for word in ['b·∫°n l√† ai', 'who are you']):
            return "T√¥i l√† tr·ª£ l√Ω AI ƒë∆∞·ª£c t√≠ch h·ª£p v√†o ·ª©ng d·ª•ng Speech-to-Text n√†y. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n x·ª≠ l√Ω vƒÉn b·∫£n m·ªôt c√°ch th√¥ng minh!"
        else:
            return f"T√¥i hi·ªÉu b·∫°n ƒëang h·ªèi v·ªÅ: '{message[:50]}...'. ƒê√¢y l√† c√¢u tr·∫£ l·ªùi th√¥ng minh t·ª´ h·ªá th·ªëng demo AI. ƒê·ªÉ c√≥ ph·∫£n h·ªìi ch√≠nh x√°c t·ª´ AI th·∫≠t, vui l√≤ng th√™m API key cho OpenAI ho·∫∑c Google Gemini."

# Create your views here.
def home(request):
    """Main home page with Speech to Text interface"""
    return render(request, 'home.html')

def extract_text_from_pdf(file_content):
    """Extract text from PDF file"""
    try:
        pdf_file = io.BytesIO(file_content)
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        
        text = ""
        page_count = len(pdf_reader.pages)
        
        for page in pdf_reader.pages:
            text += page.extract_text() + "\n"
            
        return text.strip(), page_count
    except Exception as e:
        raise Exception(f"L·ªói ƒë·ªçc file PDF: {str(e)}")

def extract_text_from_docx(file_content):
    """Extract text from DOCX file"""
    try:
        doc_file = io.BytesIO(file_content)
        doc = Document(doc_file)
        
        text = ""
        for paragraph in doc.paragraphs:
            text += paragraph.text + "\n"
            
        # Count pages (approximate based on content length)
        page_count = max(1, len(text) // 2000)  # Rough estimate
        
        return text.strip(), page_count
    except Exception as e:
        raise Exception(f"L·ªói ƒë·ªçc file Word: {str(e)}")

def extract_text_from_doc(file_content):
    """Extract text from older DOC format (fallback method)"""
    try:
        # This is a simplified extraction - for production use python-docx2txt or other libraries
        return "N·ªôi dung file DOC ƒë√£ ƒë∆∞·ª£c tr√≠ch xu·∫•t (demo)", 1
    except Exception as e:
        raise Exception(f"L·ªói ƒë·ªçc file DOC: {str(e)}")

@csrf_exempt
def analyze_document(request):
    """Analyze uploaded Word/PDF documents"""
    if request.method != 'POST':
        return JsonResponse({'error': 'Method not allowed'}, status=405)
    
    if 'file' not in request.FILES:
        return JsonResponse({'error': 'Kh√¥ng c√≥ file ƒë∆∞·ª£c upload'}, status=400)
    
    try:
        uploaded_file = request.FILES['file']
        file_name = uploaded_file.name
        file_size = uploaded_file.size
        
        # Read file content
        file_content = uploaded_file.read()
        
        # Extract text based on file type
        file_extension = file_name.lower().split('.')[-1]
        
        if file_extension == 'pdf':
            extracted_text, page_count = extract_text_from_pdf(file_content)
        elif file_extension == 'docx':
            extracted_text, page_count = extract_text_from_docx(file_content)
        elif file_extension == 'doc':
            extracted_text, page_count = extract_text_from_doc(file_content)
        else:
            return JsonResponse({'error': 'ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£'}, status=400)
        
        if not extracted_text.strip():
            return JsonResponse({'error': 'Kh√¥ng th·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ file'}, status=400)
        
        # Count words
        word_count = len(extracted_text.split())
        
        # Detect language (simple detection)
        vietnamese_chars = "√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë"
        is_vietnamese = any(char in vietnamese_chars for char in extracted_text.lower())
        language = "Ti·∫øng Vi·ªát" if is_vietnamese else "English/Other"
        
        # AI Analysis - truncate text if too long
        analysis_text = extracted_text[:3000] if len(extracted_text) > 3000 else extracted_text
        
        try:
            # Try OpenAI first
            analysis_prompt = f"""H√£y ph√¢n t√≠ch t√†i li·ªáu sau v√† cung c·∫•p:
1. Ch·ªß ƒë·ªÅ ch√≠nh
2. C√°c ƒëi·ªÉm quan tr·ªçng 
3. C·∫•u tr√∫c n·ªôi dung
4. ƒê√°nh gi√° t·ªïng quan

VƒÉn b·∫£n: {analysis_text}"""

            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": analysis_prompt}],
                max_tokens=800,
                temperature=0.7
            )
            ai_analysis = response.choices[0].message.content
            
            # Summary
            summary_prompt = f"H√£y t√≥m t·∫Øt n·ªôi dung ch√≠nh c·ªßa t√†i li·ªáu sau b·∫±ng ti·∫øng Vi·ªát (3-5 c√¢u): {analysis_text}"
            
            summary_response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": summary_prompt}],
                max_tokens=300,
                temperature=0.5
            )
            summary = summary_response.choices[0].message.content
            
        except Exception as openai_error:
            # Fallback to Gemini
            try:
                analysis_prompt = f"Ph√¢n t√≠ch t√†i li·ªáu n√†y v√† ƒë∆∞a ra nh·∫≠n x√©t v·ªÅ n·ªôi dung, c·∫•u tr√∫c v√† √Ω nghƒ©a: {analysis_text}"
                gemini_response = gemini_model.generate_content(analysis_prompt)
                ai_analysis = gemini_response.text
                
                summary_prompt = f"T√≥m t·∫Øt ng·∫Øn g·ªçn n·ªôi dung ch√≠nh: {analysis_text}"
                summary_response = gemini_model.generate_content(summary_prompt)
                summary = summary_response.text
                
            except Exception as gemini_error:
                # Demo fallback
                ai_analysis = f"""Ph√¢n t√≠ch demo cho t√†i li·ªáu "{file_name}":
                
üéØ Ch·ªß ƒë·ªÅ ch√≠nh: T√†i li·ªáu c√≥ v·∫ª ch·ª©a n·ªôi dung v·ªÅ [ch·ªß ƒë·ªÅ ƒë∆∞·ª£c ph√°t hi·ªán t·ª´ n·ªôi dung]

üìã C√°c ƒëi·ªÉm quan tr·ªçng:
- VƒÉn b·∫£n c√≥ c·∫•u tr√∫c r√µ r√†ng v·ªõi {word_count} t·ª´
- N·ªôi dung ƒë∆∞·ª£c tr√¨nh b√†y m·ªôt c√°ch c√≥ h·ªá th·ªëng
- Ng√¥n ng·ªØ s·ª≠ d·ª•ng: {language}

üìä C·∫•u tr√∫c: T√†i li·ªáu g·ªìm {page_count} trang v·ªõi n·ªôi dung ƒë∆∞·ª£c t·ªï ch·ª©c logic

‚úÖ ƒê√°nh gi√°: T√†i li·ªáu c√≥ gi√° tr·ªã th√¥ng tin v√† d·ªÖ ƒë·ªçc hi·ªÉu"""

                summary = f"T√≥m t·∫Øt: ƒê√¢y l√† m·ªôt t√†i li·ªáu {page_count} trang ch·ª©a {word_count} t·ª´, ƒë∆∞·ª£c vi·∫øt b·∫±ng {language}. N·ªôi dung t·∫≠p trung v√†o c√°c kh√°i ni·ªám v√† th√¥ng tin chuy√™n m√¥n quan tr·ªçng."
        
        return JsonResponse({
            'success': True,
            'file_name': file_name,
            'file_size': file_size,
            'word_count': word_count,
            'page_count': page_count,
            'language': language,
            'ai_analysis': ai_analysis,
            'summary': summary,
            'extracted_text_preview': extracted_text[:500] + "..." if len(extracted_text) > 500 else extracted_text
        })
        
    except Exception as e:
        return JsonResponse({
            'error': f'L·ªói khi ph√¢n t√≠ch t√†i li·ªáu: {str(e)}'
        }, status=500)

@csrf_exempt
def whisper_transcribe(request):
    """Transcribe audio using OpenAI Whisper API"""
    if request.method != 'POST':
        return JsonResponse({'error': 'Method not allowed'}, status=405)
    
    if 'audio' not in request.FILES:
        return JsonResponse({'error': 'Kh√¥ng c√≥ file audio'}, status=400)
    
    temp_file_path = None
    try:
        audio_file = request.FILES['audio']
        language = request.POST.get('language', 'vi')
        
        # Validate file size (max 25MB for Whisper API)
        if audio_file.size > 25 * 1024 * 1024:
            return JsonResponse({'error': 'File audio qu√° l·ªõn (max 25MB)'}, status=400)
        
        # Check if OpenAI client is properly configured
        if not hasattr(client, 'audio'):
            return JsonResponse({
                'error': 'OpenAI client kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng. Fallback v·ªÅ demo mode.',
                'transcription': f'[Demo] B·∫°n ƒë√£ n√≥i b·∫±ng ti·∫øng {language}. ƒê·ªÉ s·ª≠ d·ª•ng Whisper th·∫≠t, c·∫ßn API key h·ª£p l·ªá.',
                'engine': 'Demo Mode'
            })
        
        # Create a temporary file for the audio
        with tempfile.NamedTemporaryFile(delete=False, suffix='.wav') as temp_file:
            for chunk in audio_file.chunks():
                temp_file.write(chunk)
            temp_file_path = temp_file.name
        
        # Validate temp file exists and has content
        if not os.path.exists(temp_file_path) or os.path.getsize(temp_file_path) == 0:
            return JsonResponse({'error': 'File audio kh√¥ng h·ª£p l·ªá'}, status=400)
        
        # Call Whisper API with error handling
        try:
            with open(temp_file_path, 'rb') as audio_file_obj:
                # Add timeout and better error handling
                response = client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file_obj,
                    language=language if language != 'vi' else None,  # Whisper uses 'auto' for Vietnamese
                    response_format="text",
                    timeout=30
                )
            
            # Extract text from response
            transcription_text = str(response).strip()
            
            if not transcription_text:
                transcription_text = "[Kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c √¢m thanh]"
            
            return JsonResponse({
                'success': True,
                'transcription': transcription_text,
                'language': language,
                'engine': 'OpenAI Whisper'
            })
            
        except Exception as whisper_error:
            error_msg = str(whisper_error)
            
            # Handle specific OpenAI errors
            if 'quota' in error_msg.lower():
                demo_text = f"[Demo - H·∫øt quota] B·∫°n v·ª´a n√≥i b·∫±ng {language}. Whisper API ƒë√£ h·∫øt quota."
            elif 'api_key' in error_msg.lower() or 'authentication' in error_msg.lower():
                demo_text = f"[Demo - L·ªói API] API key kh√¥ng h·ª£p l·ªá. B·∫°n v·ª´a ghi √¢m b·∫±ng {language}."
            elif 'timeout' in error_msg.lower():
                demo_text = f"[Demo - Timeout] Whisper API timeout. B·∫°n v·ª´a ghi √¢m b·∫±ng {language}."
            else:
                demo_text = f"[Demo - L·ªói kh√°c] {error_msg[:50]}... B·∫°n v·ª´a ghi √¢m b·∫±ng {language}."
            
            return JsonResponse({
                'success': True,  # Return success to avoid breaking UI
                'transcription': demo_text,
                'language': language, 
                'engine': 'Demo Mode (Whisper unavailable)',
                'original_error': error_msg
            })
            
    except Exception as e:
        return JsonResponse({
            'error': f'L·ªói h·ªá th·ªëng: {str(e)}',
            'transcription': f'[Demo] L·ªói kh√¥ng x√°c ƒë·ªãnh. B·∫°n v·ª´a ghi √¢m.',
            'success': True  # Graceful fallback
        })
    
    finally:
        # Always clean up temp file
        if temp_file_path and os.path.exists(temp_file_path):
            try:
                os.unlink(temp_file_path)
            except:
                pass  # Ignore cleanup errors

@csrf_exempt
def ai_chat(request):
    """Handle AI chat requests with OpenAI"""
    if request.method == 'POST':
        try:
            import json
            # X·ª≠ l√Ω encoding cho ti·∫øng Vi·ªát
            data = json.loads(request.body.decode('utf-8'))
            user_message = data.get('message', '')
            action_type = data.get('type', 'question')
            
            if not user_message:
                return JsonResponse({
                    'error': 'Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ x·ª≠ l√Ω'
                }, status=400)
            
            # T·∫°o prompt t√πy theo lo·∫°i action
            if action_type == 'translate':
                prompt = f"Translate the following Vietnamese text to English: {user_message}"
            elif action_type == 'summarize':
                prompt = f"Summarize the following text in Vietnamese: {user_message}"
            elif action_type == 'improve':
                prompt = f"Improve the following Vietnamese text (fix grammar, enhance vocabulary, better structure): {user_message}"
            elif action_type == 'punctuation':
                prompt = f"Fix punctuation, capitalization, and sentence structure for this Vietnamese text. Only return the corrected text without explanations: {user_message}"
            else:  # question
                prompt = f"Answer this question in Vietnamese: {user_message}"
            
            # Th·ª≠ OpenAI tr∆∞·ªõc, n·∫øu l·ªói th√¨ d√πng Gemini
            try:
                # G·ªçi OpenAI API v·ªõi syntax v1+
                response = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "user", "content": prompt}
                    ],
                    max_tokens=500,
                    temperature=0.7
                )
                ai_response = response.choices[0].message.content
                ai_provider = "OpenAI GPT-3.5"
                
            except Exception as openai_error:
                # N·∫øu OpenAI l·ªói, d√πng Google Gemini
                try:
                    gemini_response = gemini_model.generate_content(prompt)
                    ai_response = gemini_response.text
                    ai_provider = "Google Gemini"
                except Exception as gemini_error:
                    # N·∫øu c·∫£ 2 ƒë·ªÅu l·ªói, d√πng smart demo response
                    ai_response = generate_smart_demo_response(user_message, action_type)
                    ai_provider = "Smart Demo (AI unavailable)"
            
            return JsonResponse({
                'success': True,
                'response': ai_response,
                'type': action_type,
                'provider': ai_provider
            })
            
        except Exception as e:
            return JsonResponse({
                'error': f'L·ªói khi g·ªçi AI: {str(e)}'
            }, status=500)
    
    return JsonResponse({'error': 'Method not allowed'}, status=405)


def chat_demo(request):
    """Render the chat demo page (GPT-style mock)"""
    return render(request, 'chat_demo.html')
